(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{221:function(n,t,e){"use strict";e.r(t),e.d(t,"Comp",(function(){return c})),e.d(t,"code",(function(){return a}));var i=e(5),s=e(7);const o={slide:s.slide,fade:s.fade,land:s.land};class c extends i.a{static get properties(){return{a:Boolean,choice:Object}}constructor(){super(),this.choice=s.slide}select(n){this.choice=o[n.target.value],this.a=!this.a}render(){return i.c`click to transition
    <select @change=${this.select}>${Object.values(o).map(n=>i.c`<option value=${n.name}>${n.name}</option>`)}</select>
    <div @click=${()=>this.a=!this.a}
      style="margin: 20px; font-size: 30px">
    click to lit ${Object(s.transition)(this.a?"CONTENT A":"CONTENT B",this.choice)}</div>`}}const a="\nimport { LitElement, html } from 'lit-element';\nimport {\n  transition,\n  slide,\n  fade,\n  land\n} from 'lit-transition';\n\n// our built-in animations\nconst builtins = {slide,fade,land};\n\nexport class Comp extends LitElement {\n  static get properties() {\n    return { \n      a: Boolean, // to toggle content\n      choice: Object // for transition mode\n    }\n  }\n  // initialize component\n  constructor() {\n    super();\n    this.choice = slide;\n  }\n\n  // sets mode and swaps transitioned content\n  select(e) {\n    this.choice = builtins[e.target.value];\n    this.a = !this.a;\n  }\n\n  render() {\n    // animates with different modes\n    return html`click to transition\n    <select @change=${this.select}>${\n      Object.values(builtins).map(b => html`<option value=${b.name}>${b.name}</option>`)\n    }</select>\n    <div @click=${() => this.a = !this.a}\n      style=\"margin: 20px; font-size: 30px\">\n    click to lit ${transition(\n      this.a ? 'CONTENT A' : 'CONTENT B',\n      this.choice\n    )}</div>`;\n  } \n}\n"}}]);
//# sourceMappingURL=11.js.map