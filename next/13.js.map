{"version":3,"sources":["webpack:///./doc/loaders/md-loader.js?0ad5"],"names":["classes","Comp","a","Boolean","choice","Object","super","this","e","target","value","select","values","map","c","mode","enter","leave","active","lock","code"],"mappings":"8LAOA,MAAMA,EAAU,CAAC,GAAG,WAAW,YAAY,SAAS,WAE7C,MAAMC,UAAa,IACxB,wBACE,MAAO,CACLC,EAAGC,QACHC,OAAQC,QAGZ,oBACE,OAAO,GAAG,mCAIZ,cACEC,QACAC,KAAKH,OAASJ,EAAQ,GAIxB,OAAOQ,GACLD,KAAKH,OAASI,EAAEC,OAAOC,MACvBH,KAAKL,GAAKK,KAAKL,EAGjB,SAEE,OAAO,GAAI;;;;;sBAKOK,KAAKI,UACrBN,OAAOO,OAAOZ,GAASa,IAAIC,GACzB,GAAI,iBAAiBA,mBAAmBA;qBAE3B,IAAMP,KAAKL,GAAKK,KAAKL;;MAEpC,qBACAK,KAAKL,EAAI,iBAAmB,oBAAqB,CAC/Ca,KAAM,OACNC,MAAO,CAAC,WAAY,WAAWT,KAAKH,QACpCa,MAAO,CACLC,OAAQ,CAAC,WAAY,YAAYX,KAAKH,OAAQ,YAI9Ce,MAAM,iBAOH,MAAMC,EAAO","file":"13.js","sourcesContent":["\n      \nimport { LitElement, html, css } from 'lit-element';\nimport { transition } from 'lit-transition';\n\n// all rotating entrances available in animate.css\n// will be prefixed with 'rotateIn' or 'rotateOut'\nconst classes = ['','DownLeft','DownRight','UpLeft','UpRight'];\n\nexport class Comp extends LitElement {\n  static get properties() {\n    return { \n      a: Boolean, // to toggle content / trigger anim\n      choice: Object // for transition mode\n    }\n  }\n  static get styles() {\n    return css`.absolute { position: absolute }`;\n  }\n  \n  // initialize component\n  constructor() {\n    super();\n    this.choice = classes[0];\n  }\n\n  // sets mode and swaps transitioned content\n  select(e) {\n    this.choice = e.target.value;\n    this.a = !this.a;\n  }\n\n  render() {\n    // animates with different modes\n    return html`\n    <!-- get latest animate.css v3.5.1 -->\n    <link href=\"https://cdn.jsdelivr.net/npm/animate.css@3.5.1\"\n    rel=\"stylesheet\" type=\"text/css\">\n    click to transition\n    <select @change=${this.select}>${\n      Object.values(classes).map(c =>\n        html`<option value=${c}>rotate[In/Out]${c}</option>`)\n    }</select>\n    <button @click=${() => this.a = !this.a}>animate</button>\n    <center style=\"margin: 20px; font-size: 30px; position: relative\">\n    ${transition(\n      this.a ? 'LIT-TRANSITION' : '<3 ANIMATE.CSS <3', {\n        mode: 'both',\n        enter: ['animated', 'rotateIn'+this.choice],\n        leave: {\n          active: ['animated', 'rotateOut'+this.choice, 'absolute'],\n          // container is relative and leave transition\n          // has absolute positioning. let's lock the geometry\n          // so the leaving template does not jump around\n          lock: true\n        }\n      }\n    )}</center>`;\n  } \n}\n\n      export const code = \"\\nimport { LitElement, html, css } from 'lit-element';\\nimport { transition } from 'lit-transition';\\n\\n// all rotating entrances available in animate.css\\n// will be prefixed with 'rotateIn' or 'rotateOut'\\nconst classes = ['','DownLeft','DownRight','UpLeft','UpRight'];\\n\\nexport class Comp extends LitElement {\\n  static get properties() {\\n    return { \\n      a: Boolean, // to toggle content / trigger anim\\n      choice: Object // for transition mode\\n    }\\n  }\\n  static get styles() {\\n    return css`.absolute { position: absolute }`;\\n  }\\n  \\n  // initialize component\\n  constructor() {\\n    super();\\n    this.choice = classes[0];\\n  }\\n\\n  // sets mode and swaps transitioned content\\n  select(e) {\\n    this.choice = e.target.value;\\n    this.a = !this.a;\\n  }\\n\\n  render() {\\n    // animates with different modes\\n    return html`\\n    <!-- get latest animate.css v3.5.1 -->\\n    <link href=\\\"https://cdn.jsdelivr.net/npm/animate.css@3.5.1\\\"\\n    rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\\n    click to transition\\n    <select @change=${this.select}>${\\n      Object.values(classes).map(c =>\\n        html`<option value=${c}>rotate[In/Out]${c}</option>`)\\n    }</select>\\n    <button @click=${() => this.a = !this.a}>animate</button>\\n    <center style=\\\"margin: 20px; font-size: 30px; position: relative\\\">\\n    ${transition(\\n      this.a ? 'LIT-TRANSITION' : '<3 ANIMATE.CSS <3', {\\n        mode: 'both',\\n        enter: ['animated', 'rotateIn'+this.choice],\\n        leave: {\\n          active: ['animated', 'rotateOut'+this.choice, 'absolute'],\\n          // container is relative and leave transition\\n          // has absolute positioning. let's lock the geometry\\n          // so the leaving template does not jump around\\n          lock: true\\n        }\\n      }\\n    )}</center>`;\\n  } \\n}\\n\";\n    "],"sourceRoot":""}