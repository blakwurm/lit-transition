(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{215:function(t,n,i){"use strict";i.r(n),i.d(n,"Comp",(function(){return s})),i.d(n,"code",(function(){return c}));var e=i(5),o=i(7);class s extends e.a{static get properties(){return{a:Boolean,mode:String}}exec(t){this.mode=t,this.a=!this.a}render(){return e.c`click to transition
    <button @click=${()=>this.exec("in-out")}>in-out</button>
    <button @click=${()=>this.exec("out-in")}>out-in</button>
    <button @click=${()=>this.exec("both")}>both</button>
    ${Object(o.transition)(this.a?e.c`<div>A ${this.mode}</div>`:e.c`<div>B ${this.mode}</div>`,Object(o.slide)({x:"200px",mode:this.mode}))}`}}const c="\nimport { LitElement, html } from 'lit-element';\nimport { transition, slide } from 'lit-transition';\n\nexport class Comp extends LitElement {\n  static get properties() {\n    return { \n      a: Boolean, // to toggle content\n      mode: String // for transition mode\n    }\n  }\n\n  // sets mode and swaps transitioned content\n  exec(mode) {\n    this.mode = mode;\n    this.a = !this.a;\n  }\n\n  render() {\n    // animates with different modes\n    return html`click to transition\n    <button @click=${() => this.exec('in-out')}>in-out</button>\n    <button @click=${() => this.exec('out-in')}>out-in</button>\n    <button @click=${() => this.exec('both')}>both</button>\n    ${transition(this.a\n      ? html`<div>A ${this.mode}</div>`\n      : html`<div>B ${this.mode}</div>`,\n      slide({x:'200px', mode: this.mode})\n    )}`;\n  } \n}\n"}}]);
//# sourceMappingURL=5.js.map