{"version":3,"sources":["webpack:///./doc/loaders/md-loader.js?8005"],"names":["items","Comp","i","Number","super","connectedCallback","this","interval","setInterval","length","disconnectedCallback","clearInterval","map","item","x","code"],"mappings":"6LAMA,MAAMA,EAAQ,CACZ,UAAW,GAAI,aAAc,QAAS,MAAO,GAAI,cACjD,OAAQ,MAAQ,QAAS,MAAO,MAAO,OAGlC,MAAMC,UAAa,IAExB,wBAA0B,MAAO,CAAEC,EAAGC,QAGtC,oBACEC,MAAMC,oBAENC,KAAKC,SAAWC,YAAY,IAAMF,KAAKJ,IAAMI,KAAKJ,GAAG,GAAG,GAAGF,EAAMS,OAAQ,MAG3E,uBACEL,MAAMM,uBACNC,cAAcL,KAAKC,UAGrB,SAEE,OAAO,qBACLP,EAAMY,IAAIC,GAAQ,GAAI,MAAMA,SAAYP,KAAKJ,GAC7C,gBAAM,CAACY,EAAE,YAKF,MAAMC,EAAO","file":"4.js","sourcesContent":["\n      \nimport { LitElement, html } from 'lit-element';\nimport { transition, slide } from 'lit-transition';\n\n// list of renderable templates\nconst items = [\n  'Another', html`<i>one</i>`, 'bites', 'the', html`<b>dust</b>`,\n  'Hey,', 'I\\'m', 'gonna', 'get', 'you', 'too'\n];\n\nexport class Comp extends LitElement {\n  // this.i is used to cycle through items\n  static get properties() { return { i: Number } }\n\n  // helper to set up periodic updates to this.i\n  connectedCallback() {\n    super.connectedCallback();\n    // toggle every second\n    this.interval = setInterval(() => this.i = ((this.i||0)+1)%items.length, 1200);\n  }\n  // cleans up on unmount\n  disconnectedCallback(){\n    super.disconnectedCallback();\n    clearInterval(this.interval);\n  }\n\n  render() {\n    // cycle through items\n    return transition(\n      items.map(item => html`<b>${item}</b>`)[this.i],\n      slide({x:'300px'})\n    )\n  } \n}\n\n      export const code = \"\\nimport { LitElement, html } from 'lit-element';\\nimport { transition, slide } from 'lit-transition';\\n\\n// list of renderable templates\\nconst items = [\\n  'Another', html`<i>one</i>`, 'bites', 'the', html`<b>dust</b>`,\\n  'Hey,', 'I\\\\'m', 'gonna', 'get', 'you', 'too'\\n];\\n\\nexport class Comp extends LitElement {\\n  // this.i is used to cycle through items\\n  static get properties() { return { i: Number } }\\n\\n  // helper to set up periodic updates to this.i\\n  connectedCallback() {\\n    super.connectedCallback();\\n    // toggle every second\\n    this.interval = setInterval(() => this.i = ((this.i||0)+1)%items.length, 1200);\\n  }\\n  // cleans up on unmount\\n  disconnectedCallback(){\\n    super.disconnectedCallback();\\n    clearInterval(this.interval);\\n  }\\n\\n  render() {\\n    // cycle through items\\n    return transition(\\n      items.map(item => html`<b>${item}</b>`)[this.i],\\n      slide({x:'300px'})\\n    )\\n  } \\n}\\n\";\n    "],"sourceRoot":""}