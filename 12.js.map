{"version":3,"sources":["webpack:///./doc/loaders/md-loader.js?579e"],"names":["async","getImages","topics","Promise","all","map","t","fetch","url","Image","src","prel","anim","mode","Both","opacity","leave","lock","Comp","slides","Object","slide","Number","super","this","n","left","right","num","length","slideshow","skip","code"],"mappings":"8LAMAA,eAAeC,EAAUC,GAMvB,aAFqBC,QAAQC,IAAIF,EAAOG,IAAIC,GAAKC,MADpC,wCAC+CD,MAE9CD,IAAI,EAAEG,SAAS,GAAI,YAJpB,CAACA,MAAU,IAAIC,OAAQC,IAAMF,IAAMA,EAIHG,CAAKH,OAIpD,MAAMI,EAAO,CACXC,KAAM,iBAAeC,KACrBC,QAAS,EACTC,MAAO,CAAEC,MAAM,IAKV,MAAMC,UAAa,IACxB,wBACE,MAAO,CACLC,OAAQC,OACRC,MAAOC,QAGX,oBAGE,OAAO,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6BZ,cACEC,QACAC,KAAKH,MAAQ,EAEb,WAEEG,KAAKL,aAAelB,EAClB,CAAE,QAAS,QAAS,MAAO,MAAO,WAHtC,GAQF,KAAKwB,EAAI,GACPb,EAAKc,QAAUD,EAAI,GACnBb,EAAKe,SAAWF,EAAI,GACpB,MAAMG,EAAMJ,KAAKL,OAAOU,OACxBL,KAAKH,OAASG,KAAKH,MAAQI,EAAIG,GAAOA,EAIxC,SACE,OAASJ,KAAKL,OAASK,KAAKM,UAAY,GAAI,wBAG9C,gBAEE,OAAO,GAAI;uBACQ,IAAMN,KAAKO,MAAM;uBACjB,IAAMP,KAAKO,KAAK;MACjC,qBAAWP,KAAKL,OAAOK,KAAKH,OAAQ,gBAAMT,OAInC,MAAMoB,EAAO","file":"12.js","sourcesContent":["\n      \nimport { LitElement, html, css } from 'lit-element';\nimport { transition, TransitionMode, slide } from 'lit-transition';\n\n// helper that uses unsplash to get a list of <img> templates\nasync function getImages(topics) {\n  // brutal image preloader\n  const prel = (url) => !(new Image().src = url)||url;\n  const base = 'https://source.unsplash.com/800x500/?';\n  const slides = await Promise.all(topics.map(t => fetch(base+t)))\n    // slides is a list of image urls\n  return slides.map(({url}) => html`<img src=${prel(url)}>`);\n}\n\n// our base animation configuration\nconst anim = {\n  mode: TransitionMode.Both, // transition enter+leave concurrently\n  opacity: 0.0, // fade in as well\n  leave: { lock: true }\n  // left, right <- these will be set dynamically\n};\n\n// slideshow component\nexport class Comp extends LitElement {\n  static get properties() {\n    return { \n      slides: Object, // list of slides\n      slide: Number   // current slide\n    }\n  }\n  static get styles() {\n    // some styling, you don't really need this\n    // remove it and the slideshow will work but look more ugly\n    return css`\n    :host {\n      position: relative;\n      display: flex;\n      height: 200px;\n      overflow: hidden;\n      border: 1px solid;\n    }\n    div {\n      margin: auto;\n    }\n    [l],[r] {\n      z-index: 1;\n      position: absolute;\n      top: 50%;\n    }\n    [l] {\n      left: 5%;\n    }\n    [r] {\n      right: 5%;\n    }\n    img {\n      margin: auto;\n      max-height: 100%;\n      max-width: 100%;\n    }\n    `;\n  }\n  constructor() {\n    super();\n    this.slide = 0;\n    // get some cool images\n    (async () => {\n      // this.slides is also used know if we initialized\n      this.slides = await getImages(\n        [ 'house', 'beach', 'cat', 'dog', 'funny' ]\n      );\n    })();\n  }\n\n  skip(n = 1) {\n    anim.left = !!(n > 0)  // configure to slide left depending on n\n    anim.right = !!(n < 0) // configure to slide rigt depending on n\n    const num = this.slides.length; // we wrap here\n    this.slide = (this.slide + n + num) % num;\n  }\n\n  // show loading until we are ready\n  render() {\n    return !!this.slides ? this.slideshow : html`<div>Loading...</div>`;\n  }\n\n  get slideshow() {\n    // slideshow tremplate\n    return html`\n    <button l @click=${() => this.skip(-1)}>prev</button>\n    <button r @click=${() => this.skip(1)}>next</button>\n    ${transition(this.slides[this.slide], slide(anim))}`;\n  }\n}\n\n      export const code = \"\\nimport { LitElement, html, css } from 'lit-element';\\nimport { transition, TransitionMode, slide } from 'lit-transition';\\n\\n// helper that uses unsplash to get a list of <img> templates\\nasync function getImages(topics) {\\n  // brutal image preloader\\n  const prel = (url) => !(new Image().src = url)||url;\\n  const base = 'https://source.unsplash.com/800x500/?';\\n  const slides = await Promise.all(topics.map(t => fetch(base+t)))\\n    // slides is a list of image urls\\n  return slides.map(({url}) => html`<img src=${prel(url)}>`);\\n}\\n\\n// our base animation configuration\\nconst anim = {\\n  mode: TransitionMode.Both, // transition enter+leave concurrently\\n  opacity: 0.0, // fade in as well\\n  leave: { lock: true }\\n  // left, right <- these will be set dynamically\\n};\\n\\n// slideshow component\\nexport class Comp extends LitElement {\\n  static get properties() {\\n    return { \\n      slides: Object, // list of slides\\n      slide: Number   // current slide\\n    }\\n  }\\n  static get styles() {\\n    // some styling, you don't really need this\\n    // remove it and the slideshow will work but look more ugly\\n    return css`\\n    :host {\\n      position: relative;\\n      display: flex;\\n      height: 200px;\\n      overflow: hidden;\\n      border: 1px solid;\\n    }\\n    div {\\n      margin: auto;\\n    }\\n    [l],[r] {\\n      z-index: 1;\\n      position: absolute;\\n      top: 50%;\\n    }\\n    [l] {\\n      left: 5%;\\n    }\\n    [r] {\\n      right: 5%;\\n    }\\n    img {\\n      margin: auto;\\n      max-height: 100%;\\n      max-width: 100%;\\n    }\\n    `;\\n  }\\n  constructor() {\\n    super();\\n    this.slide = 0;\\n    // get some cool images\\n    (async () => {\\n      // this.slides is also used know if we initialized\\n      this.slides = await getImages(\\n        [ 'house', 'beach', 'cat', 'dog', 'funny' ]\\n      );\\n    })();\\n  }\\n\\n  skip(n = 1) {\\n    anim.left = !!(n > 0)  // configure to slide left depending on n\\n    anim.right = !!(n < 0) // configure to slide rigt depending on n\\n    const num = this.slides.length; // we wrap here\\n    this.slide = (this.slide + n + num) % num;\\n  }\\n\\n  // show loading until we are ready\\n  render() {\\n    return !!this.slides ? this.slideshow : html`<div>Loading...</div>`;\\n  }\\n\\n  get slideshow() {\\n    // slideshow tremplate\\n    return html`\\n    <button l @click=${() => this.skip(-1)}>prev</button>\\n    <button r @click=${() => this.skip(1)}>next</button>\\n    ${transition(this.slides[this.slide], slide(anim))}`;\\n  }\\n}\\n\";\n    "],"sourceRoot":""}